TO DO list (TatraDAS)

3.x
General
- automaticka detekcia retazcov (najma Pascal a C)
- rozne znakove sady v synedit
- zdroje (PE, NE, atd) ?
- paralelne disassemblovanie viacerych sekcii
- Lazarus GUI
- nastroj pre dokumentaciu zdrojoveho kodu (komentare na zaciatku metod) - kedze zatial kod je okomentovany dost slabo, taky nastroj nema velmi zmysel

Disassembler
- 64 bit (pozor na instrukciu MOVD/Q, PEXTRD/Q, PINSRD/Q, CMPXCH8B/16B atd.)
- instrukcie pre virtualizaciu
- nerekurzivne disassemblovanie
- 0F C2 - CMPxxxx - spravit rozne nazvy instrukcie podla tretieho operandu
- FISTTP je to SSE3 instrukcia medzi FPU - co s tym ? ako nastavit instrSet na SSE3 ?
- problemy (disasm & yasm/nasm): (skoky a volania medzi sekciam)
    snowcraft.exe undefined symbol (yasm) - problem je v tom, ze v CALL a jeho ciel su v roznych sekciach -> CALL v jednej sekcii nevytvori referenciu v druhej sekcii a teda tam nedisassemblujeme od ciela CALL-u
- operand size atribute pri instrukciach s implicitnou adresaciou (to je to zakomentovane a16 a spol. pri spracovani prefixu)
- kompilovatelnost s NASM
  - upravit aby NASM nehadzal warningy (hadze "value does not fit in signed 8 bit field", lebo ocakava signed hodnoty, TatraDAS dava unsigned, najvhodnejsi by bol specialny mod disassemblovania)

GUI
- optimalizacia ImportTabFrame - nahradit ListView StringGrid-om, aby sa v pripade obrovskeho mnzostva importovanych funkcii z jedneho modulu nenacitaval zoznam funkcii prilis dlho
- zamysliet sa nad polozkami v menu (a buttonmi na codeframe)
- prerobit menu pomocou actions
- system na spravu GUI dat (hodnoty formularov) & ich ukladanie do projektoveho suboru
  - pridat ulozenie bookmarkov v projekte
- usporiadanie GUI prvkov na FileTabFrame

Misc
- ELF
    - pochopit a prerobit import
    - pridat inicializaciu Regionov
    - exefily by mali mat len take polia, ktore su hodne ukladania do projektu (resp. existencie po otvoreni projektu), zvysok by sa mal posuvat pri vytvarani ako parametre
- porozmyslat na rozdelenim SaveToFile na dve metody (DAS a DHF)

2.9.9
- ikona pre "Exportovat..."

General
- OptionsForm - co s tym ? nastavenia sa ukladaju od INI, aj preklady su pripravene
- zamysliet sa nad zmyslom ExecFileManagera, co jej jeho ulohou, neda sa to spravit inak ? (nema ziaden stav(premenne))

Disassembler:
- refactorizacia disassemblera!

Misc
- procmat - rozdelit na viac unitov ?
- mozno je to OK - pe import lookup table NULL error
- dlho trvajuca zmena na ???

GUI
- refaktorovat MyEdits

DONE:
- errory a vynimky (ExecFileManager atd.)
- ProgressManager:
  - zjednotenie refreshovania zobrazovania progressu pre GUI a console mode,
  - zabezpecuje dobiehanie do 100% (aby sa zobrazil progress, akokolvek kratky, aspon 100%), prejavuje sa v console mode (FPC and Linux)
- pri znovu disassemblovani celeho suboru su zatvorene zalozky Code sekcii, lebo ich automaticke refreshovanie vo faze "priprava vystupu" tuto fazu strasne spomaluje
- refaktorizacia ExportSectionToNASM (+ tvorba testov)

- save - rozdelit na Save Project a Export (Disassembly, NASM, lubovolne)
- stringy rozhadzane po suboroch
- ReplaceLines (zatial nevyhadzuje ziadne bezadresne riadky, iba nahradzovane adresne riadky)
- optimalizovany ExportTabFrame - ListView nahradenym StringGrid-om (ak mala kniznica vela exportovanych funkcii, ako napr. svx680mi.dll - 16000 alebo bf_svx680mi.dll - 31000, tak sa ListItem-y vytvarali strasne dlho)
- vlastny MessageDlg, aby zobrazoval buttony v jazyku TatraDASu
- detekovat imported o uroven volania skor "call x, x: jump [0x...]"

- vacsie moznosti z konzoly - napr. save as projekt, DAS, NASM
- pozriet co pise SVN log
- refaktorizacia GROUP instrukcii
- refaktorizacia a kontrola FPU instrukcii
- SSSE3, SSE41, SSE42
- zavedeny typ instrukcie (napr. normal alebo undefined), odstranena polozka "opcode"
- drag & drop
- refaktorizacia Translator-a

- oprava - uvadzanie velkosti operandu vzdy, ak je v pamati; -> dosledkom je kompilovatelnost s NASM (hoci este stale hadze warningy)
- oprava velkosti operandu u niektorych FPU instrukcii,
    oprava FLD (ma mat iba jeden parameter, chyba je v Intel manuale), podobne FUCOM

- oprava - velkost operandu FPU instrukcii nezavisi na operand-size attribute
- oprava XLAT, bolo XLAT/XLATB, ma byt XLATB
- oprava: "undefined opcode" mal adresu relativnu k zaciatku sekcie, ma byt pamatova (t.j. + fMemOffset), taktiez nie je dobre zarovnany (boli tam napevno medzery)
- oprava viacerym SSE(x) instrukciam chybal treti operand
- oprava NASM export - komentare (riadky zacinajuce ;) mali odseknuty zaciatok a potom nemali ; na zaciatku -> NASM nezozral
- oprava Disassembler - rozlisovanie MOVLPS/MOVHLPS, MOVHPS/MOVLHPS - rovnaky opcode, lisia sa reg/mem adresaciou (obsahuje to napr. Chessmaster.exe)
- pridat Go to line (cislo riadku)
- oprava MOVD instrukcie (prvy parameter ked mal byt MMX, tak bol 32 bit register)
- oprava DFE0 ma byt FNSTSW AX, nie FSTSW AX - sposobobalo to problemy : short jump out of range, chyba je v manuali (opcode map), podobne FSTCW/FNSTCW, FSTSW/FNSTSW word [], FSTENV/FNSTENV, FSAVE/FNSAVE, FINIT/FNINIT, FCLEX/FNCLEX
- oprava CALL far mem - chybalo "far", teda tvarilo sa ako "near"
- oprava ODstranene memory leak-y vdaka FastMM
- oprava ChangeToString nezamrzne ak Pascal string pretrca cez sekciu -> nespravi sa nic
- oprava instrukcia FXRSTOR bola nazvana FXSTOR (chybalo 'R', dosledkom bolo nezvyraznenie)
- oprava instrukcie LDMXCSR, STMXCSR, FXSAVE, FXRSTOR, CLFLUSH nemali operand
- oprava padu pri exporte do NASM v prapade "qword" a "pascal string"

-----------------------------

- relocation table v MZ formate
- moznost vzdy si vybrat otvorit subor ako subor neznameho formatu
- lepsia detekcia volania funkcii
- spracovanie resources (alebo pridanie Resource Hackera)
- podpora inych formatov
- kalkulacka
- oddelit REPxx ako samostatnu instrukciu (problem v COMMAND.COM na adrese 0x19)

Krajne situacie:
- importovany modul bez funkcii



statistika funkcii (po najdeni call pridaj funkciu, velkost pridaj po najdeni jej return-u)

interpretacia call [aaa], kde aaa je v statickych datach


*******************************************

Navrhy na mozne zmeny:

- fExecFormat si pri loadovani kazdy File nastavuje v Create(). Dalo by sa spravit "protected function GetExecFormat: ..." ktoru by si kazdy File overridol
- nastavenia do XML (?)


Refactoring DISASSEMBLER-a
- zacat pisat novy TDisassembler
- Test-Driven Programming
- oddelit disassembler konkretneho procesora od vseobecnych casti kodu a dat
- ASM aj PUREPASCAL verzie metod kvoli platform independence
